on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        platforms: ["linux-x64", "osx-x64", "win-x64", "osx-arm64"]
    steps:

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract version
        id: extract_version
        run: |
          echo "Extracting version..."
          version=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//' | tr -d '\n')
          echo "::set-output name=version::$version"
          echo "Version extracted: $version"

      - name: Create NuGet configuration file
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <packageSources>
              <!-- Add the public NuGet.org repository as a package source -->
              <add key="NuGet.org" value="https://api.nuget.org/v3/index.json" />
              <!-- Add the private Nexus NuGet repository as a package source -->
              <add key="MyPrivateNugetSource" value="${{ secrets.NUGET_FEED_URL }}" />
              <!-- Include other package sources if needed -->
            </packageSources>
          </configuration>' > nuget.config

      - name: Restore packages
        run: dotnet restore

      - name: Build project
        run: |
          version=${{ steps.extract_version.outputs.version }}
          dotnet publish -r ${{ matrix.platforms }} -c Release --self-contained /p:Version=${version}

      - name: Determine if prerelease
        id: determine_prerelease
        run: |
          if [[ ${{ steps.extract_version.outputs.version }} == *"preview"* ]]; then
            echo "::set-output name=is_prerelease::true"
          else
            echo "::set-output name=is_prerelease::false"
          fi
        shell: bash
      
      - name: Create release zips
        run: |
          mkdir -p zips
          version=${{ steps.extract_version.outputs.version }}
          zipfilename=aelf-contract-patcher-${{ matrix.platforms }}-v$version.zip
          zip -j "zips/$zipfilename" "AElf.ContractPatcher/bin/Release/net6.0/${{ matrix.platforms }}/publish"/*

      - name: Upload zips to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: zips/aelf-contract-patcher-${{ matrix.platforms }}-v${{ steps.extract_version.outputs.version }}.zip
          asset_name: aelf-contract-patcher-${{ matrix.platforms }}-v${{ steps.extract_version.outputs.version }}.zip
          tag: ${{ github.ref }}
          prerelease: ${{ steps.determine_prerelease.outputs.is_prerelease }}
