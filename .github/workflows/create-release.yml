on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
    - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
      - name: Set platforms
        id: set_platforms
        run: |
          platforms="linux-x64 osx-x64 win-x64 osx-arm64"
          echo "::set-output name=platforms::$platforms"

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Extract version
        id: extract_version
        run: |
          echo "Extracting version..."
          version=$(echo "${{ github.ref }}" | sed 's/refs\/tags\/v//' | tr -d '\n')
          echo "::set-output name=version::$version"
          echo "Version extracted: $version"

#      - name: Create NuGet configuration file
#        run: |
#          echo '<?xml version="1.0" encoding="utf-8"?>
#          <configuration>
#            <packageSources>
#              <!-- Add the public NuGet.org repository as a package source -->
#              <add key="NuGet.org" value="https://api.nuget.org/v3/index.json" />
#              <!-- Add the private Nexus NuGet repository as a package source -->
#              <add key="MyPrivateNugetSource" value="${{ secrets.NUGET_FEED_URL }}" />
#              <!-- Include other package sources if needed -->
#            </packageSources>
#           <apikeys>
#              <!-- Add API key for your private Nexus NuGet repository -->
#              <add key="MyPrivateNugetSource" value="${{ secrets.NUGET_API_KEY }}" />
#              <!-- Include other API keys if needed -->
#            </apikeys>
#          </configuration>' > nuget.config

#      - name: Setup .NET
#        run: nuget setapikey ${{ secrets.NUGET_API_KEY }} -source ${{ secrets.NUGET_FEED_URL }}

      - name: Add nuget source
        run: nuget sources add -Name "MyExample" -Source ${{ secrets.NUGET_FEED_URL }} -username ${{ secrets.NUGET_USERNAME }} -password ${{ secrets.NUGET_PASSWORD }}

      #      - name: Set up NuGet
#        uses: NuGet/setup-nuget@v1
#        with:
#          nuget-api-key: ${{ secrets.NUGET_API_KEY }} # Use your API key stored as a secret
#
#      - name: Add private Nexus NuGet source
#        run: nuget sources add -name MyPrivateNugetSource -source ${{ secrets.NUGET_FEED_URL }} -username apikey -password ${{ secrets.NUGET_API_KEY }}
#

#
#      - name: Check files
#        run: ls -la

      - name: Restore packages
        run: dotnet restore

      - name: Build project # This would actually build your project, using zip for an example artifact
        run: |
          mkdir -p zips
          version=${{ steps.extract_version.outputs.version }}
          platforms="${{ steps.set_platforms.outputs.platforms }}"
          for platform in $platforms; do
            dotnet publish -r $platform -c Release --self-contained /p:Version=${version}
          done

      - name: Determine if prerelease
        id: determine_prerelease
        run: |
          if [[ ${{ steps.extract_version.outputs.version }} == *"preview"* ]]; then
            echo "::set-output name=is_prerelease::true"
          else
            echo "::set-output name=is_prerelease::false"
          fi
        shell: bash

      - name: Create prerelease
        if: steps.determine_prerelease.outputs.is_prerelease == 'true'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          prerelease: true
      
      - name: Create release
        if: steps.determine_prerelease.outputs.is_prerelease == 'false'
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.extract_version.outputs.version }}
          prerelease: false
      
      - name: Create and upload release zips
        run: |
          mkdir zips
          version=${{ steps.extract_version.outputs.version }}
          platforms="${{ steps.set_platforms.outputs.platforms }}"
          for platform in $platforms; do
            zipfilename=aelf-contract-patcher-$platform-v$version.zip
            zip -j "zips/$zipfilename" "bin/net6.0/Release/$platform"/*
            echo "Uploading $zipfilename ..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/zip" \
              --data-binary "@zips/$zipfilename.zip" \
              "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets?name=$zipfilename"
          done
